# PFTT

PFTT is a cross-platform and multi-platform high-speed PHP Test tool which supports unit tests, PHPTs for PHP-Core and
PHPUnit tests for PHP Applications, along with comparison, debuging, performance, UI Automation, smoke and multi-scenario support. 

## Meaning 
PFTT has and can mean many different things:
 - PHP Function Test Tool
 - PHP Filesystem Test Tool
 - Practically Formulated Test Tool
 - PHP Fast Test Tool
 - PHP Full Test Tool
 - Pftt is a Fun Test Tool

## License

BSD-3 Clause. See LICENSE.txt

## API Documentation

 - [All Documentation](doc/apidoc/index.html)

### Important Classes

 - [CliPhptTestCaseRunner](doc/apidoc/com/mostc/pftt/runner/CliPhptTestCaseRunner.html) - Executes a single PHPT Test Case (using the CLI SAPI) and evaluates
 - [HttpPhptTestCaseRunner](doc/apidoc/com/mostc/pftt/runner/HttpPhptTestCaseRunner.html) - Executes a single PHPT Test Case against a PHP build running under a Web Server (Builtin, IIS, Apache)
 - [Host](doc/apidoc/com/mostc/pftt/host/Host.html) - Abstracts host management so client code doesn't need to care if host is local or remote(ssh)
 - [ScenarioSet](doc/apidoc/com/mostc/pftt/scenario/ScenarioSet.html) - Models 90 sets of different [Scenarios](apidoc/com/mostc/pftt/scenario/Scenario.html) to test PHP in
 - [PhptTestCase](doc/apidoc/com/mostc/pftt/model/phpt/PhptTestCase.html) - Models a PHPT Test case

## INSTALL

 - Install Java SE 6 or 7 (JRE or JDK)
   - Must install JDK if you plan on development work. For normal use, JRE is sufficient.</li>
   - Sun/Oracle Java JDK: [http://www.oracle.com/technetwork/java/javase/downloads/jdk6u37-downloads-1859587.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk6u37-downloads-1859587.html)
   - Sun/Oracle Java JRE: [http://www.oracle.com/technetwork/java/javase/downloads/jre6u37-downloads-1859589.html](http://www.oracle.com/technetwork/java/javase/downloads/jre6u37-downloads-1859589.html)
 - download PFTT ZIP
 - decompress ZIP to C:\php-sdk\PFTT\current (Windows) or ~/php-sdk/PFTT/current (Linux)
 - Note: should have directories like c:\php-sdk\PFTT\current\bin not c:\php-sdk\PFTT\current\pftt-version\bin
   - add PFTT to $PATH or %PATH% (optional)
     - Windows
     - set PATH=c:\php-sdk\PFTT\current\bin;%PATH%
     - To make it permanent, open System Properties from Control Panel (can also right-click on Start > Computer and click My Computer)
     - Click Advanced then Environment variables
     - Find PATH under System variables and add C:\php-sdk\PFTT\current\bin
     - Linux (bash)
     - Open ~/.bash_profile
     - Add export PATH=$PATH:~/php-sdk/PFTT/current/bin
     - chmod +x ~/php-sdk/PFTT/current/bin/pftt

## Upgrading

PFTT has a builtin upgrade command. Just do:

	> pftt upgrade
	
and you'll have the latest version.

## USAGE

Add PFTT to your Shell's PATH, so you can just run 'pftt'

Windows:

	> \PHP-SDK\PFTT\CURRENT\BIN\SET_ENV
	
Linux:

	> PFTT_HOME/bin/set_env

Now you can just run `pftt` for everything.

Find and download newest 5.3 snapshot build that provides an NTS build

	> pftt release_get 5.3 NTS newest
	
Find and download second-newest(previous before newest) 5.4 snapshot build that provides an NTS build

	> pftt rget 5.4 NTS previous

Stores builds and test-packs in C:\Php-sdk (Windows) or ~/php-sdk (Linux).
For convenience can do

	> pftt rgn 5.3 nts
	
List releases (by build, branch, both, or all)

	> pftt release_list 5.3
	> pftt release_list NTS
	> pftt rl nts 5.3
	> pftt rl
	
Download specific release (test-pack and build)

	> pftt rg MASTER TS rc165a0b

Run all PHPTs from the test-pack

    > pftt core_all C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567

Runs PHPTs only from list in SKIP_list_file (can add comments to lists with a ; or #)

    > pftt core_list C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 SKIP_list_file

Runs PHPTs that contain 021 (name fragment) in their name

    > pftt core_named C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 021

NOTE: On Windows PFTT will prompt you to elevate it to Administrator privileges for some operations to configure Windows Error Reporting and firewall

If build or test-pack not in current directory, automatically checks php-sdk (so you can ommit c:\php-sdk, etc...)

    > pftt core_all php-5.4.7-win32-vc9-x86 php-test-pack-5.4-r1234567

Opens a GUI to efficiently review large amounts of tests

    > pftt -gui core_all C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 pftt -gui -config config_file core_list C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 pftt -gui -config config_file core_named C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567

Shows help info (additional commands, etc...)

    > pftt -help

Run all PHPTs from the test-pack, running each PHPT 3 times 

    > pftt -stress_each 3 core_all C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567

### Functional Build Comparison(FBC) Reports

Run one test pass

    > pftt core_all C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 Or pftt core_list C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 SKIP_list_file Or pftt core_named C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 021

Run a second test pass, using a different build and/or test-pack

    > pftt pa C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234568 Or pftt core_list C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234568 SKIP_list_file Or pftt core_named C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234568 021

PFTT will automatically generate an FBC report and display it using system default web browser

Setup Wordpress (or other ~20 other PHP application), IIS and MySQL

    > pftt -config iis,wordpress,mysql setup

Run PHPT tests on Apache (instead of CLI)

    > pftt -config apache core_all C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 Or pftt core_list C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 SKIP_list_file Or pftt core_named C:\php-sdk\php-5.4.7-win32-vc9-x86 C:\php-sdk\php-test-pack-5.4-r1234567 021

## DEVELOPMENT

 - Install Eclipse Java IDE 4.2 (Juno), not Eclipse Classic see http://eclipse.org/
   - download and decompress .zip file 
 - Run Eclipse, the default value for workspace is ok
   - from decompressed eclipse folder, run eclipse.exe (Windows) or eclipse (linux)
 - Install Groovy Plugin:
   - Help > Install New Software
   - Add
   - Enter 'Groovy' for name and http://dist.springsource.org/release/GRECLIPSE/e4.2/ for location and click ok/add
   - Check Groovy-Eclipse and click next through all the screens
     -You may get a warning about groovy-eclipse not being signed, ignore and install anyway. Also, Eclipse will need to restart.
 - On Windows, find c:\php-sdk\PFTT\Current\.classpath and .project. Look at their Properties in Windows Explorer and make sure the 'Read Only' and 'Hidden' attributes are not set. Clear it if it is, or Eclipse will get Access Denied errors.
 - File > Import > General > Existing project
 - Choose C:\php-sdk\PFTT\current
 - That should be it (PFTT comes with eclipse .project and .classpath files which already have all the correct settings)
 - By setting Host#Dev > 0, you can have PFTT use php-sdk\PFTT\Dev-N and php-sdk\Dev-N instead of php-sdk\PFTT\current, to run stable and multiple development versions of PFTT side-by-side 

## Adding Scenarios

To add any test [Scenario](doc/apidoc/com/mostc/pftt/scenario/Scenario.html), implement [Scenario](doc/apidoc/com/mostc/pftt/scenario/Scenario.html) and instantiate it in Scenario#getAllDefaultScenarios or a config file if it needs special configuration (like connecting to a remote host, database, etc... that the user would have to setup).

### Database Scenario

More specifically, to add a database scenario (MySQL, Firebird, etc...) implement [AbstractDatabaseScenario](doc/apidoc/com/mostc/pftt/scenario/AbstractDatabaseScenario.html) and add it to Scenario#getAllDefaultScenarios or a config file if it needs special configuration (like connecting to a remote host, database, etc... that the user would have to setup).

### SAPI Scenario

To add a SAPI Scenario (CLI, web server, etc...), implement [AbstractSAPIScenario](doc/apidoc/com/mostc/pftt/scenario/AbstractSAPIScenario.html) and add it to Scenario#getAllScenarios.

If you want to implement a Web Server scenario (IIS, Apache, etc...), implement [AbstractWebServerScenario](doc/apidoc/com/mostc/pftt/scenario/AbstractWebServerScenario.html), a subclass of [AbstractSAPIScenario](doc/apidoc/com/mostc/pftt/scenario/AbstractSAPIScenario.html), which provides additional methods for testing PHPT tests using HTTP against PHP running under web servers.

### Adding a PHPUnit Application

If the application uses PHPUnit, implement [PhpUnitAppTestPack](doc/apidoc/com/mostc/pftt/model/app/PhpUnitAppTestPack.html). If it uses something else or something custom (like Wordpress), implement [PhpAppTestPack](doc/apidoc/com/mostc/pftt/model/app/PhpAppTestPack.html).


## Crash debugging

To re-run tests in exactly the same order, use -thread_count=1 console option with `app_list` or `core_list` commands.

### For crashes that happen every time

1. Create a list of the tests that are crashing or might be crashing
2. Run with -debug_all and core_list

This will run all the tests in a Debugger (WinDebug for Windows and GDB for Linux). Do 1 first to reduce the number of tests to run since they'll run much slower in a debugger.

When testing with Apache, this will run the Debugger on Apache to help trace Apache related problems.

### For tests that crash occasionally

These options may be useful with core_list or core_all or core_named. -run_group_times_all, -run_test_times and -debug_list especially. 

-run_test_times_all <N> - runs each test N times in a row/consecutively
-run_test_times_list <N> <list file> - runs tests in that list N times. if used with -run_test_times_all, tests not in list can be run different number of times from tests in list (ex: run listed tests 5 times, run all other tests 2 times).
-debug_list <list files> - runs tests in list in Debugger
-run_group_times_all <N> - runs all groups of tests N times (in same order every time, unless -randomize used)
-run_group_times_list <N> <list file> - like grun_group_times_All and run_test_times_list (but for groups of tests) 
-no_nts - runs tests in any thread, regardless of thread-safety. This can increase load/stress, but may lead to false FAILS/ERRORs, especially in file or database tests.

### Crash Reporting

When a PHP (or Apache) process crashes, PFTT will try running it a second time to confirm that that specific test really caused a crash before reporting the test as CRASH.

On Windows, this double-crashing may cause 2 WER Popups (Windows Error Reporting) to appear for each test that crashed. This is normal, and its just PFTT being extra accurate about reporting CRASHes.

#### Cleaning up an interrupted Test Run (Windows)

Use `taskkill /im:php.exe /f /t` or `taskkill /im:httpd.exe /f /t` to kill off remaining php or apache processes

Check `net use` and use `net use z: /delete` to take care of remaining remote file systems


### Automation

Be sure to use -auto console option to signal that its being run automatically. This will supress blocking warnings and change some other settings to make sure that it runs without you having to click any buttons, etc...

On Windows, be sure to run PFTT under Admistrator privileges or you'll get a bunch of UAC popups that will block automation.
